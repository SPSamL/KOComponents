import Router from './router';
import {isUndefined, runMiddleware, sequence} from './utils';
var Context = function Context(params) {
    Object.assign(this, params);
    this.fullPath = this.router.base + this.pathname;
    this.canonicalPath = this.fullPath.replace(new RegExp(this.router.$root.base, 'i'), '');
    this._queue = [];
    this._beforeNavigateCallbacks = [];
    this._afterRenderCallbacks = [];
    this._beforeDisposeCallbacks = [];
    this._afterDisposeCallbacks = [];
};

var prototypeAccessors = { $parent: {},$parents: {},$child: {},$children: {},element: {} };
Context.prototype.addBeforeNavigateCallback = function addBeforeNavigateCallback (cb) {
    this._beforeNavigateCallbacks.unshift(cb);
};
prototypeAccessors.$parent.get = function () {
    return this.router.isRoot ? undefined : this.router.$parent.ctx;
};
prototypeAccessors.$parents.get = function () {
    return this.router.$parents.map(function (r) { return r.ctx; });
};
prototypeAccessors.$child.get = function () {
    return isUndefined(this.router.$child) ? undefined : this.router.$child.ctx;
};
prototypeAccessors.$children.get = function () {
    return this.router.$children.map(function (r) { return r.ctx; });
};
prototypeAccessors.element.get = function () {
    return document.getElementsByClassName('ko-component-router-view')[this.router.depth];
};
Context.prototype.runBeforeNavigateCallbacks = function runBeforeNavigateCallbacks () {
    return new Promise((function ($return, $error) {
        var ctx, callbacks;
        ctx = this;
        callbacks = [];
        while (ctx) {
            callbacks = ctx._beforeNavigateCallbacks.concat( callbacks);
            ctx = ctx.$child;
        }
        return sequence(callbacks).then($return, $error);
    }).bind(this));
};
Context.prototype.queue = function queue (promise) {
    this._queue.push(promise);
};
Context.prototype.flushQueue = function flushQueue () {
    return new Promise((function ($return, $error) {
            var this$1 = this;

        return $return(Promise.all(this._queue).then(function () { return this$1._queue = []; }));
    }).bind(this));
};
Context.prototype.runBeforeRender = function runBeforeRender () {
    return new Promise((function ($return, $error) {
        var appBeforeRender, appDownstream, routeBeforeRender, routeDownstream;
        var assign;
            (assign = runMiddleware(Router.middleware, this), appBeforeRender = assign[0], appDownstream = assign[1]);
        this._afterRenderCallbacks.push(appDownstream);
        this._beforeDisposeCallbacks.push(appDownstream);
        this._afterDisposeCallbacks.push(appDownstream);
        return appBeforeRender.then((function ($await_3) {
            try {
                var assign;
                    (assign = runMiddleware(this.route.middleware, this), routeBeforeRender = assign[0], routeDownstream = assign[1]);
                this._afterRenderCallbacks.push(routeDownstream);
                this._beforeDisposeCallbacks.unshift(routeDownstream);
                this._afterDisposeCallbacks.unshift(routeDownstream);
                return routeBeforeRender.then((function ($await_4) {
                    try {
                        return this.flushQueue().then((function ($await_5) {
                            try {
                                return $return();
                            } catch ($boundEx) {
                                return $error($boundEx);
                            }
                        }).bind(this), $error);
                    } catch ($boundEx) {
                        return $error($boundEx);
                    }
                }).bind(this), $error);
            } catch ($boundEx) {
                return $error($boundEx);
            }
        }).bind(this), $error);
    }).bind(this));
};
Context.prototype.runAfterRender = function runAfterRender () {
    return new Promise((function ($return, $error) {
        return sequence(this._afterRenderCallbacks).then((function ($await_6) {
            try {
                return this.flushQueue().then((function ($await_7) {
                    try {
                        return $return();
                    } catch ($boundEx) {
                        return $error($boundEx);
                    }
                }).bind(this), $error);
            } catch ($boundEx) {
                return $error($boundEx);
            }
        }).bind(this), $error);
    }).bind(this));
};
Context.prototype.runBeforeDispose = function runBeforeDispose () {
    return new Promise((function ($return, $error) {
        if (this.$child) {
            return this.$child.runBeforeDispose().then((function ($await_8) {
                try {
                    return $If_1.call(this);
                } catch ($boundEx) {
                    return $error($boundEx);
                }
            }).bind(this), $error);
        }
        function $If_1() {
            return sequence(this._beforeDisposeCallbacks).then((function ($await_9) {
                try {
                    return this.flushQueue().then((function ($await_10) {
                        try {
                            return $return();
                        } catch ($boundEx) {
                            return $error($boundEx);
                        }
                    }).bind(this), $error);
                } catch ($boundEx) {
                    return $error($boundEx);
                }
            }).bind(this), $error);
        }
            
        return $If_1.call(this);
    }).bind(this));
};
Context.prototype.runAfterDispose = function runAfterDispose () {
    return new Promise((function ($return, $error) {
        return sequence(this._afterDisposeCallbacks).then((function ($await_11) {
            try {
                return this.flushQueue().then((function ($await_12) {
                    try {
                        return $return();
                    } catch ($boundEx) {
                        return $error($boundEx);
                    }
                }).bind(this), $error);
            } catch ($boundEx) {
                return $error($boundEx);
            }
        }).bind(this), $error);
    }).bind(this));
};

Object.defineProperties( Context.prototype, prototypeAccessors );

export default Context;


