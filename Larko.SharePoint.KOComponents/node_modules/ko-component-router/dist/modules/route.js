import pathtoRegexp from 'path-to-regexp';
import Router from './router';
import {flatMap, isArray, isFunction, isPlainObject, isString} from './utils';
var Route = function Route(path, middleware) {
    var this$1 = this;

    this.middleware = flatMap(isArray(middleware) ? middleware : [middleware], function (m) {
        var pluginMiddleware = Router.plugins.reduce(function (ms, p) {
            var _m = p(m);
            return _m ? ms.concat(isArray(_m) ? _m : [_m]) : ms;
        }, []);
        return pluginMiddleware.length > 0 ? pluginMiddleware : m;
    }).reduce(function (ms, m) {
        if (isString(m)) {
            this$1.component = m;
        } else if (isPlainObject(m)) {
            path = path.replace(/\/?!?$/, '/!');
            this$1.children = Object.entries(m).map(function (ref) {
                var r = ref[0];
                var m = ref[1];

                return new Route(r, m);
            });
            if (!this$1.component) {
                this$1.component = 'ko-component-router';
            }
        } else if (isFunction(m)) {
            ms.push(m);
        }
        return ms;
    }, []);
    if (path[path.length - 1] === '!') {
        path = path.replace('!', ':__child_path__(.*)?');
    } else {
        path = path.replace(/\(?\*\)?/, '(.*)');
    }
    this.path = path;
    this._keys = [];
    this._regexp = pathtoRegexp(path, this._keys);
};
Route.prototype.matches = function matches (path) {
        var this$1 = this;

    var matches = this._regexp.exec(path);
    if (matches === null) {
        return false;
    }
    if (this.children) {
        for (var i = 0, list = this$1.children; i < list.length; i += 1) {
            var childRoute = list[i];

                var childPath = '/' + (matches[matches.length - 1] || '');
            if (childRoute.matches(childPath)) {
                return true;
            }
        }
        return false;
    }
    return true;
};
Route.prototype.parse = function parse (path) {
        var this$1 = this;

    var childPath;
    var params = {};
    var matches = this._regexp.exec(path);
    for (var i = 1, len = matches.length;i < len; ++i) {
        var k = this$1._keys[i - 1];
        var v = matches[i] || '';
        if (k.name === '__child_path__') {
            childPath = '/' + v;
        } else {
            params[k.name] = v;
        }
    }
    return [params,path.replace(new RegExp(childPath + '$'), ''),childPath];
};
Route.createRoutes = function createRoutes (routes) {
    return Object.entries(routes).map(function (ref) {
            var r = ref[0];
            var m = ref[1];

            return new Route(r, m);
        });
};

export default Route;


