import _isPlainObject from 'is-plain-object';
export function isArray(arr) {
    return typeof arr.splice === 'function';
}

export function isBool(x) {
    return typeof x === 'boolean';
}

export function isPlainObject(x) {
    return _isPlainObject(x);
}

export function isString(x) {
    return typeof x === 'string';
}

export function isFunction(x) {
    return typeof x === 'function';
}

export function isUndefined(x) {
    return typeof x === 'undefined';
}

export function flatMap(arr, fn) {
    return arr.reduce(function (flattened, x) {
        var v = fn(x);
        return flattened.concat(isArray(v) ? v : [v]);
    }, []);
}

export function runMiddleware(callbacks) {
    var this$1 = this;
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    var downstream = [];
    callbacks = callbacks.map(function (fn) {
        var runner = generatorify(fn).apply(void 0, args);
        var run = function () { return new Promise((function ($return, $error) {
            var ret;
            ret = runner.next();
            return new Promise((function ($return, $error) {
                if (isThenable(ret)) {
                    return ret.then($return, $error);
                }
                return $return(ret.value);
            }).bind(this)).then((function ($await_18) {
                try {
                    ret = $await_18;
                    return $return(ret || true);
                } catch ($boundEx) {
                    return $error($boundEx);
                }
            }).bind(this), $error);
        }).bind(this$1)); };
        downstream.push(run);
        return run;
    });
    return [sequence.apply(void 0, [ callbacks ].concat( args )),function () { return sequence.apply(void 0, [ downstream ].concat( args )); }];
}

export function sequence(callbacks) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    return new Promise((function ($return, $error) {
        {
            var _fn, $iterator_fn_8 = [callbacks[Symbol.iterator]()];
            var $Loop_9_trampoline;
            return ($Loop_9_trampoline = (function (q) {
                var this$1 = this;

                while (q) {
                    if (q.then) 
                        { return void q.then($Loop_9_trampoline, $error); }
                    try {
                        if (q.pop) 
                            { if (q.length) 
                            { return q.pop() ? $Loop_9_exit.call(this$1) : q; }
                         else 
                            { q = $Loop_9; } }
                         else 
                            { q = q.call(this$1); }
                    } catch (_exception) {
                        return $error(_exception);
                    }
                }
            }).bind(this))($Loop_9);
            function $Loop_9() {
                if (!($iterator_fn_8[1] = $iterator_fn_8[0].next()).done && ((_fn = $iterator_fn_8[1].value) || true)) {
                    return promisify(_fn).apply(void 0, args).then((function ($await_19) {
                        try {
                            if ($await_19 === false) {
                                return $return(false);
                            }
                            return $Loop_9;
                        } catch ($boundEx) {
                            return $error($boundEx);
                        }
                    }).bind(this), $error);
                } else 
                    { return [1]; }
            }
            
        }
        function $Loop_9_exit() {
            return $return();
        }
        
    }).bind(this));
}

function isGenerator(x) {
    return x.constructor.name === 'GeneratorFunction';
}

function isThenable(x) {
    return !isUndefined(x) && isFunction(x.then);
}

function generatorify(fn) {
    return isGenerator(fn) ? fn : function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var count = 1, ret;
        return {
            next: function next() {
                return new Promise((function ($return, $error) {
                    switch (count++) {
                        case 1:
                            return promisify(fn).apply(void 0, args).then((function ($await_20) {
                                try {
                                    ret = $await_20 || false;
                                    return new Promise((function ($return, $error) {
                                        if (ret && ret.beforeRender) {
                                            return promisify(ret.beforeRender)().then($return, $error);
                                        }
                                        function $If_12() {
                                            return $return(ret);
                                        }
                                        
                                        return $return(ret);
                                    }).bind(this)).then($return, $error);
                                } catch ($boundEx) {
                                    return $error($boundEx);
                                }
                            }).bind(this), $error);
                        case 2:
                            return new Promise((function ($return, $error) {
                                var $logicalAnd_1;
                                if ($logicalAnd_1 = ret) {
                                    return promisify(ret.afterRender)().then((function ($await_23) {
                                        try {
                                            $logicalAnd_1 = $await_23;
                                            return $If_13.call(this);
                                        } catch ($boundEx) {
                                            return $error($boundEx);
                                        }
                                    }).bind(this), $error);
                                }
                                function $If_13() {
                                    return $return($logicalAnd_1);
                                }
                                
                                return $If_13.call(this);
                            }).bind(this)).then($return, $error);
                        case 3:
                            return new Promise((function ($return, $error) {
                                var $logicalAnd_2;
                                if ($logicalAnd_2 = ret) {
                                    return promisify(ret.beforeDispose)().then((function ($await_25) {
                                        try {
                                            $logicalAnd_2 = $await_25;
                                            return $If_14.call(this);
                                        } catch ($boundEx) {
                                            return $error($boundEx);
                                        }
                                    }).bind(this), $error);
                                }
                                function $If_14() {
                                    return $return($logicalAnd_2);
                                }
                                
                                return $If_14.call(this);
                            }).bind(this)).then($return, $error);
                        case 4:
                            return new Promise((function ($return, $error) {
                                var $logicalAnd_3;
                                if ($logicalAnd_3 = ret) {
                                    return promisify(ret.afterDispose)().then((function ($await_27) {
                                        try {
                                            $logicalAnd_3 = $await_27;
                                            return $If_15.call(this);
                                        } catch ($boundEx) {
                                            return $error($boundEx);
                                        }
                                    }).bind(this), $error);
                                }
                                function $If_15() {
                                    return $return($logicalAnd_3);
                                }
                                
                                return $If_15.call(this);
                            }).bind(this)).then($return, $error);
                    }
                    return $return();
                }).bind(this));
            }
        };
    };
}

function promisify(_fn) {
    var this$1 = this;
    if ( _fn === void 0 ) _fn = function () {};

    return function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new Promise((function ($return, $error) {
        var fn, ret;
        fn = (function () { return _fn.length === args.length + 1 ? new Promise(function (r) {
            _fn.apply(void 0, args.concat( [r] ));
        }) : _fn.apply(void 0, args); });
        ret = fn();
        return new Promise((function ($return, $error) {
            if (isThenable(ret)) {
                return ret.then($return, $error);
            }
            return $return(ret);
        }).bind(this)).then($return, $error);
    }).bind(this$1));
    };
}



